202104197 박서준, 202104171 김준혁

q:이번 수업에서 파일 처리와 매크로에 대해서 배웠는데 파일 입출력 부분에서 이진 파일과 텍스트 파일의 차이점이 뭐야?
a:먼저 이진 파일은 바이너리 형식으로 데이터를 저장하며, 텍스트 파일은 사람이 읽을 수 있는 문자형식으로 데이터를 저장해
'fread()'와 'fwrite()' 함수는 이진 파일에서 사용되는 거야. 그렇다면 텍스트 파일은 'fscanf()'와 'fprintf()'가 주로 사용 돼.

q:그러면 파일을 열 때 여러가지 모드가 있는데 'a'는 구체적으로 어떤 역할을 하는거야?
a:"a" 모드는 파일을 열어서 데이터를 쓸 때 사용 돼. 이 모드는 파일의 끝에 새로운 데이터를 추가하는 형식이야. 만약 파일이 없다면 새로운 파일을 생성하는 점이 독특해.

q: 두번째로 우리가 매크로를 배웠는데 매크로와 함수의 차이점은 뭐야?
a: 먼저 매크로는 전처리기에 의해 코드가 대체되어 컴파일 돼. 이에 비해 함수는 런타임에 호출되며, 인자 전달, 반환 값, 지역 변수 등을 가질 수 있어.
쉽게 말하면 매크로는 간단한 코드 대체에 주로 사용되고, 함수는 더 복잡한 로직에 사용되는 거지.

q: 그러면 매크로를 사용 할 때 주의점이 있을거 같은데 어떤 것을 주의해야할까?
a: 내가 느꼈을때는 매크로를 사용할 때 괄호 사용에 주의해야 할 것 같아.
매크로가 복잡한 표현식이나 코드 블록을 가질 경우, 괄호를 사용하여 우선순위를 명시해야 해. 또한, 매크로가 확장될 때 예상치 못한 부작용을 방지하기 위해 괄호 사용이 중요시 하다고 느껴.

q:매크로를 사용할 때 장단점은 어떤것이 있어?
a: 먼저 장점부터 설명하자면 첫번째 코드 간결성이야. 반복적이고 간단한 코드를 간결하게 작성할 수 있어.
한번 예시를 들어서 설명해줄게
#include <stdio.h>

#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr[0]))

int main() {
    int numbers[] = {1, 2, 3, 4, 5};
    int size = ARRAY_SIZE(numbers);

    printf("배열의 크기: %d\n", size);

    return 0;
} 자 이거는 배열의 크기를 계산하는 매크로의 예시야. 예시처럼 매크로를 사용하면 배열의 크기를 구하는 코드가 간단해지고, 나중에 배열이 변경되더라도 매크로만 수정하면 돼.

두번째로는 성능 향상이야. 함수 호출과는 달리 매크로는 코드 내에 직접 삽입되므로 함수 호출에 따른 오버헤드가 없지.
단점으로는 가독성 감소될수 있어. 이유는 매크로가 복잡하거나 오용될 경우 코드의 가독성이 떨어질 수 있는거지.
두번째로는 디버깅 어려움워 매크로는 전처리기에 의해 처리되므로 디버깅이 어려울 수 있을 것 같아.

q:마지막 시간에 교수님께서 풀어보시라고 한 예제문제 어떤 방식으로 접근했어?
a:먼저 완성된 소스코드 보여줄게.

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

void main() {

	FILE* fp = fopen("basic.txt", "w");
	if (fp == NULL) {
		printf("파일을 열수 없습니다.\n");
		return 1;
	}

	int sum = 0;
	int i;
	for (i = 1; i <= 100; i++) {
		sum += i;
		fprintf(fp, "%d %d %d\n", 1, i, sum);

	}

	fclose(fp);

	return 0;

}
먼저 이 문제는 파일을 열어 1부터 100까지의 정수에 대한 계산 결과를 파일에 기록하는 간단한 프로그램인데
FILE* fp = fopen("basic.txt", "w");: "basic.txt" 파일을 열고, 파일 포인터 fp에 할당해 그리고
if (fp == NULL) { printf("파일을 열 수 없습니다.\n"); return 1; } 이 부분의 의미는 파일이 열리지 않으면 에러 메시지를 출력하고 프로그램을 종료한다는 뜻이야.
int sum = 0; for (int i = 1; i <= 100; i++) { sum += i; fprintf(fp, "%d %d %d\n", 1, i, sum); } 이부분은 1부터 100까지의 숫자에 대한 루프를 돌며, 각 숫자와 그 숫자까지의 합을 "basic.txt" 파일에 기록해.
그다음에 fclose(fp)로 파일을 닫아주고 리턴값을 이용해 프로그램을 종료시키면 문제에서 원하는 답을 찾을 수 있어.


